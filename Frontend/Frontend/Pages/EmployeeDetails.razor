@page "/details/{id:guid}"
@using System.Net.Sockets

@inject NavigationManager _navigationManager
@inject EmployeeService _employeeService

<style>
@@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
    h3, h5{
     color: #fc90b0!important;
        font-family: 'Montserrat', sans-serif!important;
         font-weight: 800!important;
         text-transform: uppercase!important;
         
    }
                  
.but1{
margin-bottom: 10px;
background-color: #f5bbcc!important;
border: 4px solid #0a0a0a!important;
color: #0a0a0a!important;
text-transform: uppercase!important;
    font-family: 'Montserrat', sans-serif!important;
    font-weight: 800!important;
    font-size: 18px!important;
    
-webkit-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
-moz-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
} .but2{
margin-bottom: 10px;
background-color: #0a0a0a!important;
border: 3px solid #f5bbcc!important;
color: #f5bbcc!important;
text-transform: uppercase!important;
    font-family: 'Montserrat', sans-serif!important;
    font-weight: 800!important;
    font-size: 18px!important;
    
-webkit-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
-moz-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
} 
th{
color: #f8a4bd!important;
padding-right: 5px!important;
text-transform: uppercase!important;
}
tr, .addresstext{
color: #ffe1eb!important;
padding-left: 10px!important;
}
</style>
<h3>Details</h3>

@if (_employee != null)
{
    
<tbody>
<tr>
    <th>First name</th>
    <td>@_employee.FirstName</td>
</tr>
<tr>
    <th>Last name</th>
    <td>@_employee.LastName</td>
</tr>
<tr>
    <th>Email</th>
    <td>@_employee.Email</td>
</tr>
<tr>
    <th>Phone number</th>
    <td>@_employee.PhoneNumber</td>
</tr>
<tr>
    <th>Gender</th>
    <td>@_employee.Gender</td>
</tr>
<tr>
    <th>Date of birth</th>
    <td>@_employee.DateOfBirth.ToShortDateString()</td>
</tr>
<tr>
    <th>Date of hire</th>
    @if (_employee.DateOfHire == default)
    {
        <td></td>
    }
    else
    {
        <td>@_employee.DateOfHire.ToShortDateString()</td>
    }
</tr>
    @if (_employee.DateOfDismission != null)
    {
        <tr>
            <th>Date of dissmission</th>
            <td>@_employee.DateOfDismission.Value.Date.ToShortDateString()</td>
        </tr>
    }
<tr>
    <th>Salary</th>
    <td>$ @_employee.Salary</td>
</tr>
<tr>
    <th>Position</th>
    <td>@_employee.Position</td>
</tr>
</tbody>
<hr/>
<h5>Address</h5>

<div class="addresstext">
    @_employee.Address.Street
    <br/>
    @_employee.Address.ZipCode @_employee.Address.City
    <br/>
    @if (string.IsNullOrWhiteSpace(_employee.Address.Region))
    {
        <p>@_employee.Address.Country</p>
    }
    else
    {
        <p>@_employee.Address.Region, @_employee.Address.Country</p>
    }
</div>

<div class="container">
    <div class="btn-group" role="group" aria-label="switch">
      <button type="button" class="btn  but1" @onclick="(() => EditEmployee(Id))">Edit data</button>
      <button type="button " class="btn but2" @onclick="(() => DeleteEmployee(Id))">Remove employee</button>
    </div>
</div>

}
else
{
    <div style="color: whitesmoke">Employee not found in this area.</div>
}

@code {
    
    [Parameter]
    public Guid Id { get; set; }
    
    private Employee _employee;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _employee = _employeeService.GetEmployeeInfo(Id);
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
            switch (exception)
            {
                case HttpRequestException or SocketException:
                    _navigationManager.NavigateTo("/no-connection-to-server");
                    break;
                case NullReferenceException:
                    _navigationManager.NavigateTo("/");
                    break;
            }
        }
    }

    void EditEmployee(Guid id)
    {
        _navigationManager.NavigateTo($"edit-employee/{id}");
    }

    async void DeleteEmployee(Guid id)
    {
        var resp = await _employeeService.DeleteEmployee(id);
        if (resp.IsSuccessStatusCode || resp.StatusCode == HttpStatusCode.NoContent)
        {
            _navigationManager.NavigateTo("/");
        }
    }

}