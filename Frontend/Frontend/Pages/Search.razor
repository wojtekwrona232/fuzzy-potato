@page "/search"
@page "/search/{model:bool}/{searchValue}/{orderBy:int}/{desc:bool}/{paged:bool}"
@page "/search/{model:bool}/{orderBy:int}/{desc:bool}/{paged:bool}/{firstName?}/{lastName?}/{email?}/{phoneNumber?}/{position?}"
@using System.Net.Sockets

@inject NavigationManager _navigationManager
@inject EmployeeService _employeeService
<style>
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
.chip {
    display: inline;
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    height: 32px;
    padding: 0 12px;
    margin-right: 1rem;
    font-size: 13px;
    font-weight: 500;
    color: #ff94b5;
    cursor: pointer;
    background-color: #000000;
    border: 3px solid #ff7da4!important;
    border-radius: 16px;
    -webkit-transition: opacity .3s linear;
    transition: opacity .3s linear;
    word-wrap: break-word;
    text-transform: none;
    margin-top: 2px;
    margin-bottom: 5px;
        font-family: 'Montserrat', sans-serif;
}
.chip:hover {
    color: #ffb9cd!important;
        border: 3px solid #ffb9cd!important;
}
.table-striped tbody tr:nth-of-type(odd){
background-color: #f8a4bd!important;
color: #020202!important;
    font-family: 'Montserrat', sans-serif;
        font-size: 16px!important;
}
.table-striped tbody tr:nth-of-type(even){
background-color: #212121!important;
color: #f8a4bd!important;
    font-family: 'Montserrat', sans-serif;
        font-size: 16px!important;
}
thead{
background-color: #000000!important;
color: #f8a4bd!important;
}
th{
border-top: 1px solid #000000!important;
}
.table thead th{
border-bottom: 2px solid #000000!important;
    font-family: 'Montserrat', sans-serif;
    font-weight: 800;
    font-size: 20px;
}
.table td{
border-top: 1px solid #f8a4bd!important;
}
.btnrem {
background-color: #f5bbcc!important;
border: 3px solid #000000!important;
-webkit-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1);
-moz-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1);
box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1);
color: #020202!important;
    font-family: 'Montserrat', sans-serif;
    font-weight: 700;
    font-size: 16px!important;
}
.btnadd{
background-color: #000000!important;
border: 3px solid #f5bbcc!important;
color: #f8a4bd!important;
    font-family: 'Montserrat', sans-serif;
    font-weight: 700;
    font-size: 16px!important;
-webkit-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
-moz-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
}

.btn1{
background-color: #101010!important;
border: 3px solid #daa4ff!important;
color: #daa4ff!important;
    font-family: 'Montserrat', sans-serif;
    font-weight: 700;
    font-size: 16px!important;
-webkit-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
-moz-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
}


.btn2{
background-color: #101010!important;
border: 3px solid #ff945c!important;
color: #ff945c!important;
    font-family: 'Montserrat', sans-serif;
    font-weight: 700;
    font-size: 16px!important;
-webkit-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
-moz-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
}
.btn3{
background-color: #101010!important;
border: 3px solid #ff5472!important;
color: #ff5472!important;
    font-family: 'Montserrat', sans-serif;
    font-weight: 700;
    font-size: 16px!important;
-webkit-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
-moz-box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
box-shadow: 0px 0px 2px 0px rgba(66, 68, 90, 1);
}


.h3{
 color: #fc90b0!important;
    font-family: 'Montserrat', sans-serif;
     font-weight: 700;
     text-transform: uppercase!important;
}
label{
    color: #ffd4e0!important;
    font-family: 'Montserrat', sans-serif!important;    
    text-transform: uppercase!important;
}
input{
    background-color: #000000!important;
    border: 3px solid #ff7da4!important;
    color: #faa1ba!important;
    font-family: 'Montserrat', sans-serif;
}
select{
    background-color: #000000!important;
    border: 3px solid #ff7da4!important;
    color: #faa1ba!important;
    font-family: 'Montserrat', sans-serif;
}
.form-control:focus {
    box-shadow: 0 0 0 0.2rem rgba(255,125,164,0.2);
   }
    
.valid.modified:not([type=checkbox]) {
outline: 0!important;
}
option{
  font-family: 'Montserrat', sans-serif!important;
}
select option:hover{
      background-color: #faa1ba!important;
      color: #000000!important;
      font-weight: 500!important;
}

                  
.searchbtn{
margin-bottom: 10px;
background-color: #f5bbcc!important;
border: 4px solid #0a0a0a!important;
color: #0a0a0a!important;
text-transform: uppercase!important;
    font-family: 'Montserrat', sans-serif!important;
    font-weight: 800!important;
    font-size: 18px!important;
    
-webkit-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
-moz-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
} 

.spc{
display: inline-block!important;
position: relative;
top:12px;
width: 13px;
}
.spc:checked{
color: red!important;
background-color: blue!important;
}
</style>
<div class="container">
<div class="h3">Search for employees</div>

<div class="row">
    <div>
        <label for="checkAdvanced">Select if you want advanced search</label>
        <input id="checkAdvanced" type="checkbox" @onchange="eventArgs => { AdvancedSearchSelected(eventArgs.Value); }"/>
    </div>
    @if (_advancedSearch == false)
    {
        <div class="col-6">
            <EditForm Model="SimpleSearchModel" OnValidSubmit="HandleSimpleSearchSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <label for="searchText">Input text that you want to search for</label>
                    <InputText id="searchText" @bind-Value="SimpleSearchModel.SearchValue" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="order">Order by column</label>
                    <InputSelect id="order" @bind-Value="SimpleSearchModel.OrderBy" class="form-control">
                        <option value="">Select option ...</option>
                        <option value="1">First name</option>
                        <option value="2">Last name</option>
                        <option value="3">Email</option>
                        <option value="4">Phone number</option>
                        <option value="5">Position</option>
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="desc">Should the order be descending</label>
                    <InputCheckbox id="desc" @bind-Value="SimpleSearchModel.OrderDesc" class="form-control spc"/>
                </div>
                <div class="form-group">
                    <label for="paged">Should the result be paged</label>
                    <InputCheckbox id="paged" @bind-Value="SimpleSearchModel.Paged" class="form-control spc"/>
                </div>
                <button type="submit" class="btn searchbtn">Search</button>
            </EditForm>
        </div>
    }
    else
    {
        <div class="col-6">
            <EditForm Model="AdvancedSearchModel" OnValidSubmit="HandleAdvancedSearchSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <label for="searchText">Search by first name</label>
                    <InputText id="searchText" @bind-Value="AdvancedSearchModel.SearchValueFirstName" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="searchText1">Search by last name</label>
                    <InputText id="searchText1" @bind-Value="AdvancedSearchModel.SearchValueLastName" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="searchText2">Search by position</label>
                    <InputText id="searchText2" @bind-Value="AdvancedSearchModel.SearchValuePosition" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="searchText3">Search by phone number</label>
                    <InputText id="searchText3" @bind-Value="AdvancedSearchModel.SearchValuePhoneNumber" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="searchText4">Search by email</label>
                    <InputText id="searchText4" @bind-Value="AdvancedSearchModel.SearchValueEmail" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="order">Order by column</label>
                    <InputSelect id="order" @bind-Value="AdvancedSearchModel.OrderBy" class="form-control">
                        <option value="">Select option ...</option>
                        <option value="1">First name</option>
                        <option value="2">Last name</option>
                        <option value="3">Email</option>
                        <option value="4">Phone number</option>
                        <option value="5">Position</option>
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="desc">Should the order be descending</label>
                    <InputCheckbox id="desc" @bind-Value="AdvancedSearchModel.OrderDesc"/>
                </div>
                <div class="form-group">
                    <label for="paged">Should the result be paged</label>
                    <InputCheckbox id="paged" @bind-Value="AdvancedSearchModel.Paged"/>
                </div>
                <button type="submit" class="btn searchbtn">Search</button>
            </EditForm>
        </div>
    }
</div>

<div class="row">
    <div class="col-12">
        @if (_emails.Count > 0)
        {
            <button class="btn page-link sendmail" @onclick="() => PrintData()">Press to send email</button>
            @foreach (var value in _emails)
            {
                <button class="btn btn-link chip" role="button" aria-disabled="true" @onclick="() => AddSelectedEmployee(value)">
                    @value <b> X</b>
                </button>
            }
        }
    </div>
</div>
@if (_data != null)
{
    <div class="row">
        <div class="col-12">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Action</th>
                    <th>Select</th>
                    <th>First name</th>
                    <th>Last name</th>
                    <th>Email</th>
                    <th>Phone number</th>
                    <th>Position</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var d in _data.Data)
                {
                    <tr>
                        <td>
                            <div>
                                <button class="btn1 btn" type="button" @onclick="(() => ShowEmployee(d.Id))">See details</button>
                                <button class="btn2 btn" type="button" @onclick="(() => EditEmployee(d.Id))">Edit</button>
                                <button class="btn btn3" type="submit" @onclick="(() => DeleteEmployee(d.Id))">Delete</button>
                            </div>
                        </td>
                        <td>
                            @if (_emails.Contains(d.Email))
                            {
                                <button class="btn btnrem page-link" @onclick="(() => AddSelectedEmployee(d.Email))">REMOVE</button>
                            }
                            else
                            {
                                <button class="btn btnadd page-link" @onclick="(() => AddSelectedEmployee(d.Email))">ADD </button>
                            }
                        </td>
                        <td>@d.FirstName</td>
                        <td>@d.LastName</td>
                        <td>@d.Email</td>
                        <td>@d.PhoneNumber</td>
                        <td>@d.Position</td>
                    </tr>
                }
                </tbody>
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        <li class="page-item">
                            <button class="btn page-link" @onclick="(() => RenderPage(_data.PreviousPage))">Previous</button>
                        </li>
                        @if (_data.PageNumber > 1)
                        {
                            <li class="page-item">
                                <button class="btn page-link" @onclick="(() => RenderPage(_data.FirstPage))">1</button>
                            </li>
                        }
                        @if (_data.PageNumber > 2)
                        {
                            <li class="page-item">
                                <button class="btn page-link" @onclick="(() => RenderPage(_data.PreviousPage))">@(_data.PageNumber - 1)</button>
                            </li>
                        }
                        <li class="page-item">
                            <button class="btn page-link">@_data.PageNumber</button>
                        </li>
                        @if (_data.NextPage != null && _data.PageNumber < _data.TotalPages)
                        {
                            <li class="page-item">
                                <button class="btn page-link" @onclick="(() => RenderPage(_data.NextPage))">@(_data.PageNumber + 1)</button>
                            </li>
                        }
                        <li class="page-item">
                            <button class="btn page-link" @onclick="(() => RenderPage(_data.LastPage))">@(_data.TotalPages)</button>
                        </li>
                        <li class="page-item">
                            <button class="btn page-link" @onclick="(() => RenderPage(_data.NextPage))">Next</button>
                        </li>
                    </ul>
                </nav>
            </table>
        </div>
    </div>
}

@if (_dataCollection != null)
{
    <div class="row">
        <div class="col-12">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Action</th>
                    <th>Select</th>
                    <th>First name</th>
                    <th>Last name</th>
                    <th>Email</th>
                    <th>Phone number</th>
                    <th>Position</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var d in _dataCollection)
                {
                    <tr>
                        <td>
                            <div>
                                <button class="btn1 btn" type="button" @onclick="(() => ShowEmployee(d.Id))">See details</button>
                                <button class="btn2 btn" type="button" @onclick="(() => EditEmployee(d.Id))">Edit</button>
                                <button class="btn btn3" type="submit" @onclick="(() => DeleteEmployee(d.Id))">Delete</button>
                            </div>
                        </td>
                        <td>
                            @if (_emails.Contains(d.Email))
                            {
                                <button class="btn btnrem page-link" @onclick="(() => AddSelectedEmployee(d.Email))">REMOVE</button>
                            }
                            else
                            {
                                <button class="btn btnadd page-link" @onclick="(() => AddSelectedEmployee(d.Email))">ADD </button>
                            }
                        </td>
                        <td>@d.FirstName</td>
                        <td>@d.LastName</td>
                        <td>@d.Email</td>
                        <td>@d.PhoneNumber</td>
                        <td>@d.Position</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}

</div>

@functions {

    void AdvancedSearchSelected(object checkValue)
    {
        if ((bool) checkValue)
        {
            _advancedSearch = true;
            Model = true;
        }
        else
        {
            _advancedSearch = false;
            Model = false;
        }
    }

}

@code {
    //{model:bool}/{searchValue}&{orderBy}&{desc}&{paged}
    //{model:bool}/{orderBy}&{desc}&{paged}/{fN}/{LastName}/{Email}/{PhoneNumber}/{Position}
    [Parameter]
    public bool Model { get; set; }

    [Parameter]
    public string SearchValue { get; set; }

    [Parameter]
    public string? FirstName { get; set; }

    [Parameter]
    public string? LastName { get; set; }

    [Parameter]
    public string? Email { get; set; }

    [Parameter]
    public string? PhoneNumber { get; set; }

    [Parameter]
    public string? Position { get; set; }

    [Parameter]
    public int OrderBy { get; set; }

    [Parameter]
    public bool Desc { get; set; }

    [Parameter]
    public bool Paged { get; set; }

    private bool _wasPaged;
    private ICollection<EmployeeBasicDataDto> _dataCollection;
    private readonly List<string> _emails = new();
    private BasicPaged _data;
    private bool _advancedSearch;
    private SimpleSearchModel SimpleSearchModel { get; } = new();
    private AdvancedSearchModel AdvancedSearchModel { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        _dataCollection = null;

        if (Model)
        {
            _advancedSearch = true;
            AdvancedSearchModel.SearchValueFirstName = FirstName;
            AdvancedSearchModel.SearchValueLastName = LastName;
            AdvancedSearchModel.SearchValueEmail = Email;
            AdvancedSearchModel.SearchValuePhoneNumber = PhoneNumber;
            AdvancedSearchModel.SearchValuePosition = Position;
            AdvancedSearchModel.OrderBy = OrderBy;
            AdvancedSearchModel.OrderDesc = Desc;
            AdvancedSearchModel.Paged = Paged;
            if (!string.IsNullOrWhiteSpace(FirstName) || !string.IsNullOrWhiteSpace(LastName) || !string.IsNullOrWhiteSpace(Email) ||
                !string.IsNullOrWhiteSpace(PhoneNumber) || !string.IsNullOrWhiteSpace(Position))
            {
                try
                {
                    if (Paged)
                    {
                        _data = await _employeeService.GetAdvancedSearchPaged(AdvancedSearchModel);
                    }
                    else
                    {
                        _dataCollection = await _employeeService.GetAdvancedSearch(AdvancedSearchModel);
                    }
                }
                catch (Exception exception)
                {
                    if (exception is HttpRequestException or SocketException)
                    {
                        _navigationManager.NavigateTo("/no-connection-to-server");
                    }
                }
            }
            else
            {
                _data = null;
                _dataCollection = null;
            }
        }
        else
        {
            _advancedSearch = false;
            SimpleSearchModel.SearchValue = SearchValue;
            SimpleSearchModel.OrderBy = OrderBy;
            SimpleSearchModel.OrderDesc = Desc;
            SimpleSearchModel.Paged = Paged;

            if (!string.IsNullOrWhiteSpace(SearchValue))
            {
                try
                {
                    if (Paged)
                    {
                        _data = await _employeeService.GetBasicSearchPaged(SimpleSearchModel);
                    }
                    else
                    {
                        _dataCollection = await _employeeService.GetBasicSearch(SimpleSearchModel);
                    }
                }
                catch (Exception exception)
                {
                    if (exception is HttpRequestException or SocketException)
                    {
                        _navigationManager.NavigateTo("/no-connection-to-server");
                    }
                }
            }
            else
            {
                _data = null;
                _dataCollection = null;
            }
        }
    }

    void AddSelectedEmployee(string dto)
    {
        if (!_emails.Contains(dto))
        {
            _emails.Add(dto);
        }
        else
        {
            _emails.Remove(dto);
        }
    }
    
    void ShowEmployee(Guid id)
    {
        _navigationManager.NavigateTo($"details/{id}");
    }

    void EditEmployee(Guid id)
    {
        _navigationManager.NavigateTo($"edit-employee/{id}");
    }

    async void DeleteEmployee(Guid id)
    {
        if (Model)
        {
            var resp = await _employeeService.DeleteEmployee(id);
            if (resp.IsSuccessStatusCode || resp.StatusCode == HttpStatusCode.NoContent)
            {
                _navigationManager.NavigateTo($"/search/{true}/{AdvancedSearchModel.OrderBy}/{AdvancedSearchModel.OrderDesc}/{AdvancedSearchModel.Paged}/{AdvancedSearchModel.SearchValueFirstName}/{AdvancedSearchModel.SearchValueLastName}/{AdvancedSearchModel.SearchValueEmail}/{AdvancedSearchModel.SearchValuePhoneNumber}/{AdvancedSearchModel.SearchValuePosition}", true);
            }
        }
        else
        {
            var resp = await _employeeService.DeleteEmployee(id);
            if (resp.IsSuccessStatusCode || resp.StatusCode == HttpStatusCode.NoContent)
            {
                _navigationManager.NavigateTo($"/search/{false}/{SimpleSearchModel.SearchValue}/{SimpleSearchModel.OrderBy}/{SimpleSearchModel.OrderDesc}/{SimpleSearchModel.Paged}", true);
            }
        }
    }

    async void RenderPage(Uri uri)
    {
        _data = await _employeeService.GetBasicPaged(uri);
        StateHasChanged();
    }

    void PrintData()
    {
        var value = _emails.Aggregate("", (current, email) => current + email + ";-;");
        value = value.Remove(value.Length-3);
        _navigationManager.NavigateTo($"/send-email/{value}");
    }

    async void HandleSimpleSearchSubmit()
    {
        switch (_wasPaged)
        {
            case true when !SimpleSearchModel.Paged:
                _data = null;
                break;
            case false when SimpleSearchModel.Paged:
                _dataCollection = null;
                break;
        }
        if (SimpleSearchModel.Paged)
        {
            _data = await _employeeService.GetBasicSearchPaged(SimpleSearchModel);
            _wasPaged = true;
        }
        else
        {
            _dataCollection = await _employeeService.GetBasicSearch(SimpleSearchModel);
            _wasPaged = false;
        }
        StateHasChanged();
    }

    async void HandleAdvancedSearchSubmit()
    {
        switch (_wasPaged)
        {
            case true when !AdvancedSearchModel.Paged:
                _data = null;
                break;
            case false when AdvancedSearchModel.Paged:
                _dataCollection = null;
                break;
        }
        if (AdvancedSearchModel.Paged)
        {
            _data = await _employeeService.GetAdvancedSearchPaged(AdvancedSearchModel);
            _wasPaged = true;
        }
        else
        {
            _dataCollection = await _employeeService.GetAdvancedSearch(AdvancedSearchModel);
            _wasPaged = false;
        }
        StateHasChanged();
    }

}