@page "/"

@inject NavigationManager _navigationManager
@inject EmployeeService _employeeService



<button class="btn page-link" @onclick="() => PrintData()">Press to send email</button>
@if (_data == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <table class="table">
            <thead>
            <tr>
                <th>Action</th>
                <th>Select</th>
                <th>First name</th>
                <th>Last name</th>
                <th>Email</th>
                <th>Phone number</th>
                <th>Position</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var d in _data.Data)
            {
                <tr>
                    <td>
                        <div>
                            <button class="btn-primary btn" type="button" @onclick="(() => ShowEmployee(d.Id))">See details</button>
                            <button class="btn-warning btn" type="button" @onclick="(() => EditEmployee(d.Id))">Edit</button>
                            <button class="btn btn-danger" type="submit" @onclick="(() => DeleteEmployee(d.Id))">Delete</button>
                        </div>
                    </td>
                    <td>
                        <input type="checkbox" value="@IsEmployeeSelected(d)" @onchange="args => { AddSelectedEmployee(d, args.Value); }"/>
                    </td>
                    <td>@d.FirstName</td>
                    <td>@d.LastName</td>
                    <td>@d.Email</td>
                    <td>@d.PhoneNumber</td>
                    <td>@d.Position</td>
                </tr>
            }
            </tbody>
            <nav aria-label="Page navigation example">
                <ul class="pagination">
                    <li class="page-item">
                        <button class="btn page-link" @onclick="(() => RenderPage(_data.PreviousPage))">Previous</button>
                    </li>
                    @if (_data.PageNumber > 1)
                    {
                        <li class="page-item">
                            <button class="btn page-link" @onclick="(() => RenderPage(_data.FirstPage))">1</button>
                        </li>
                    }
                    @if (_data.PageNumber > 2)
                    {
                        <li class="page-item">
                            <button class="btn page-link" @onclick="(() => RenderPage(_data.PreviousPage))">@(_data.PageNumber - 1)</button>
                        </li>
                    }
                    <li class="page-item">
                        <button class="btn page-link">@_data.PageNumber</button>
                    </li>
                    @if (_data.NextPage != null && _data.PageNumber < _data.TotalPages)
                    {
                        <li class="page-item">
                            <button class="btn page-link" @onclick="(() => RenderPage(_data.NextPage))">@(_data.PageNumber + 1)</button>
                        </li>
                    }
                    <li class="page-item">
                        <button class="btn page-link" @onclick="(() => RenderPage(_data.LastPage))">@(_data.TotalPages)</button>
                    </li>
                    <li class="page-item">
                        <button class="btn page-link" @onclick="(() => RenderPage(_data.NextPage))">Next</button>
                    </li>
                </ul>
            </nav>
        </table>
    </div>
}

@functions {
    private ICollection<EmployeeBasicDataDto> EmployeeList { get; set; } = new List<EmployeeBasicDataDto>();

    bool IsEmployeeSelected(EmployeeBasicDataDto d)
    {
        return EmployeeList.Contains(d);
    }

    void AddSelectedEmployee(EmployeeBasicDataDto dto, object checkValue)
    {
        if ((bool) checkValue)
        {
            if (!EmployeeList.Contains(dto))
            {
                EmployeeList.Add(dto);
            }
        }
        else
        {
            if (EmployeeList.Contains(dto))
            {
                EmployeeList.Remove(dto);
            }
        }
    }
}

@code {
    private BasicPaged _data;

    protected override async Task OnInitializedAsync()
    {
        _data = await _employeeService.GetBasicPaged();
    }

    void ShowEmployee(Guid id)
    {
        _navigationManager.NavigateTo($"details/{id}");
    }

    void EditEmployee(Guid id)
    {
        _navigationManager.NavigateTo($"edit-employee/{id}");
    }

    async void DeleteEmployee(Guid id)
    {
        var resp = await _employeeService.DeleteEmployee(id);
        if (resp.IsSuccessStatusCode || resp.StatusCode == HttpStatusCode.NoContent)
        {
            _navigationManager.NavigateTo("/", true);
        }
    }

    async void RenderPage(Uri uri)
    {
        _data = await _employeeService.GetBasicPaged(uri);
        
        
        
        StateHasChanged();
    }

    void PrintData()
    {
        foreach (var emp in EmployeeList)
        {
            Console.WriteLine(emp.Id);
        }
    }

}