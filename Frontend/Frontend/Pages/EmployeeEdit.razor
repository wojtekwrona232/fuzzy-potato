@page "/edit-employee/{id:guid}"

@inject EmployeeService _employeeService
@inject NavigationManager _navigationManager

<style>
@@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
    .h3{
     color: #fc90b0!important;
        font-family: 'Montserrat', sans-serif;
         font-weight: 700;
         text-transform: uppercase!important;
    }
        label{
         color: #ffd4e0!important;
            font-family: 'Montserrat', sans-serif!important;    
            text-transform: uppercase!important;
        }
        input{
        background-color: #000000!important;
    border: 3px solid #ff7da4!important;
        color: #faa1ba!important;
            font-family: 'Montserrat', sans-serif;
        }
                select{
                background-color: #000000!important;
            border: 3px solid #ff7da4!important;
                color: #faa1ba!important;
                    font-family: 'Montserrat', sans-serif;
                }
.form-control:focus {
    box-shadow: 0 0 0 0.2rem rgba(255,125,164,0.2);
   }
    
.valid.modified:not([type=checkbox]) {
outline: 0!important;
}
option{
  font-family: 'Montserrat', sans-serif!important;
}
select option:hover{
      background-color: #faa1ba!important;
      color: #000000!important;
      font-weight: 500!important;
}

                  
button{
margin-bottom: 10px;
background-color: #f5bbcc!important;
border: 4px solid #0a0a0a!important;
color: #0a0a0a!important;
text-transform: uppercase!important;
    font-family: 'Montserrat', sans-serif!important;
    font-weight: 800!important;
    font-size: 18px!important;
    
-webkit-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
-moz-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
} 
</style>

<div class="container">
    <div class="h3">EDIT EMPLOYEE DETAILS</div>
    <div class="row">
        <!-- Personal data form -->
        <div class="col-6">
            <div class="mt-2">
                <EditForm Model="NameModel" OnValidSubmit="HandleNameSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <InputText id="firstName" @bind-Value="NameModel.FirstName" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="lastname">Last Name</label>
                        <InputText id="lastname" @bind-Value="NameModel.LastName" class="form-control"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Change name</button>
                </EditForm>
            </div>
            <div class="mt-2">
                <EditForm Model="PhoneNumberModel" OnValidSubmit="HandlePhoneSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="phone">Phone number</label>
                        <InputText id="phone" @bind-Value="PhoneNumberModel.PhoneNumber" class="form-control"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Change phone number</button>
                </EditForm>
            </div>
            <div class="mt-2">
                <EditForm Model="EmailModel" OnValidSubmit="HandleEmailSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="email">Email address</label>
                        <InputText id="email" @bind-Value="EmailModel.Email" class="form-control"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Change email address</button>
                </EditForm>
            </div>
            <div class="mt-2">
                <EditForm Model="DobModel" OnValidSubmit="HandleDobSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="dob">Date of birth</label>
                        <InputDate id="dob" @bind-Value="DobModel.DateOfBirth" class="form-control"></InputDate>
                    </div>
                    <button type="submit" class="btn btn-primary">Change date of birth</button>
                </EditForm>
            </div>
            <div class="mt-2">
                <EditForm Model="GenderModel" OnValidSubmit="HandleGenderSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="Gender">Gender</label>
                        <InputSelect id="Gender" @bind-Value="GenderModel.Gender" class="form-control">
                            @foreach (var gender in GenderOptions.Gender)
                            {
                                <option value="@gender">@gender</option>
                            }
                        </InputSelect>
                        @if (GenderModel.Gender == "Other")
                        {
                            <label for="GenderText">Gender</label>
                            <InputText id="GenderText" @bind-Value="GenderModel.GenderInput" class="form-control"></InputText>
                        }
                    </div>
                    <button type="submit" class="btn btn-primary">Change gender</button>
                </EditForm>
            </div>
        </div>
        <!-- Address form -->
        <div class="col-6">
            <div class="mt-2">
                <EditForm Model="AddressModel" OnValidSubmit="HandleAddressSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="street">Street address</label>
                        <InputText id="street" @bind-Value="AddressModel.Street" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="zip">Zip code</label>
                        <InputText id="zip" @bind-Value="AddressModel.ZipCode" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="city">City name</label>
                        <InputText id="city" @bind-Value="AddressModel.City" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="region">Region name</label>
                        <InputText id="region" @bind-Value="AddressModel.Region" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="country">Country name</label>
                        <InputText id="country" @bind-Value="AddressModel.Country" class="form-control"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Change address</button>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="row mb-5 mt-5">
        <div class="col-6">
            <div class="mt-2">
                <EditForm Model="PositionModel" OnValidSubmit="HandlePositionSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="position">Position at the office</label>
                        <InputText id="position" @bind-Value="PositionModel.Position" class="form-control"></InputText>
                    </div>
                    <button type="submit" class="btn btn-primary">Change position</button>
                </EditForm>
            </div>

            <div class="mt-2">
                <EditForm Model="SalaryModel" OnValidSubmit="HandleSalarySubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="salary">Salary</label>
                        <InputNumber id="salary" @bind-Value="SalaryModel.Salary" class="form-control"></InputNumber>
                    </div>
                    <button type="submit" class="btn btn-primary">Change salary</button>
                </EditForm>
            </div>
        </div>

        <div class="col-6">
            <div class="mt-2">
                <EditForm Model="HireDateModel" OnValidSubmit="HandleHireSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="hire">Hiring data</label>
                        <InputDate id="hire" @bind-Value="HireDateModel.Date" class="form-control"></InputDate>
                    </div>
                    <button type="submit" class="btn btn-primary">Change hiring date</button>
                </EditForm>
            </div>

            <div class="mt-2">
                <EditForm Model="DismissDateModel" OnValidSubmit="HandleDismissSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="dismiss">Dismission data</label>
                        <InputDate id="dismiss" @bind-Value="DismissDateModel.Date" class="form-control"></InputDate>
                    </div>
                    <button type="submit" class="btn btn-primary">Change dismission date</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Guid Id { get; set; }

    private NameModel NameModel { get; } = new();
    private DobModel DobModel { get; } = new();
    private HireDateModel HireDateModel { get; } = new();
    private DismissionDateModel DismissDateModel { get; } = new();
    private PhoneNumberModel PhoneNumberModel { get; } = new();
    private EmailModel EmailModel { get; } = new();
    private PositionModel PositionModel { get; } = new();
    private SalaryModel SalaryModel { get; } = new();
    private GenderModel GenderModel { get; } = new();
    private AddressEditModel AddressModel { get; } = new();

    private Employee _employee;

    protected override async Task OnInitializedAsync()
    {
        _employee = await _employeeService.GetEmployee(Id);
        NameModel.FirstName = _employee.FirstName;
        NameModel.LastName = _employee.LastName;
        DobModel.DateOfBirth = _employee.DateOfBirth;
        HireDateModel.Date = _employee.DateOfHire;
        DismissDateModel.Date = _employee.DateOfDismission;
        PhoneNumberModel.PhoneNumber = _employee.PhoneNumber;
        EmailModel.Email = _employee.Email;
        PositionModel.Position = _employee.Position;
        SalaryModel.Salary = _employee.Salary;
        if (GenderOptions.Gender.Contains(_employee.Gender))
        {
            GenderModel.Gender = _employee.Gender;
        }
        else
        {
            GenderModel.Gender = "Other";
            GenderModel.GenderInput = _employee.Gender;
        }
        AddressModel.Street = _employee.Address.Street;
        AddressModel.ZipCode = _employee.Address.ZipCode;
        AddressModel.City = _employee.Address.City;
        AddressModel.Region = _employee.Address.Region;
        AddressModel.Country = _employee.Address.Country;
    }

    async void HandleNameSubmit()
    {
        var res = await _employeeService.EditName(Id, NameModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandleDobSubmit()
    {
        var res = await _employeeService.EditDob(Id, DobModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandleHireSubmit()
    {
        var res = await _employeeService.EditHireDate(Id, HireDateModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandleDismissSubmit()
    {
        var res = await _employeeService.EditDismissDate(Id, DismissDateModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandlePhoneSubmit()
    {
        var res = await _employeeService.EditPhoneNumber(Id, PhoneNumberModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandleEmailSubmit()
    {
        var res = await _employeeService.EditEmail(Id, EmailModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandlePositionSubmit()
    {
        var res = await _employeeService.EditPosition(Id, PositionModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandleGenderSubmit()
    {
        var res = await _employeeService.EditGender(Id, GenderModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandleAddressSubmit()
    {
        var res = await _employeeService.EditAddress(Id, AddressModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }

    async void HandleSalarySubmit()
    {
        Console.WriteLine(SalaryModel.Salary);
        var res = await _employeeService.EditSalary(Id, SalaryModel);
        if (res.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"/edit-employee/{Id}", true);
        }
    }


}