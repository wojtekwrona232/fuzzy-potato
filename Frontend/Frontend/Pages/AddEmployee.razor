@page "/create-new"
@using System.Text
@using Newtonsoft.Json
@using System.Net.Sockets
@inject EmployeeService _employeeService
@inject NavigationManager _navigationManager

<style>
@@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
    .h3{
     color: #fc90b0!important;
        font-family: 'Montserrat', sans-serif;
         font-weight: 700;
         text-transform: uppercase!important;
    }
        label{
         color: #ffd4e0!important;
            font-family: 'Montserrat', sans-serif!important;    
            text-transform: uppercase!important;
        }
        input{
        background-color: #000000!important;
    border: 3px solid #ff7da4!important;
        color: #faa1ba!important;
            font-family: 'Montserrat', sans-serif;
        }
                select{
                background-color: #000000!important;
            border: 3px solid #ff7da4!important;
                color: #faa1ba!important;
                    font-family: 'Montserrat', sans-serif;
                }
.form-control:focus {
    box-shadow: 0 0 0 0.2rem rgba(255,125,164,0.2);
   }
    
.valid.modified:not([type=checkbox]) {
outline: 0!important;
}
option{
  font-family: 'Montserrat', sans-serif!important;
}
select option:hover{
      background-color: #faa1ba!important;
      color: #000000!important;
      font-weight: 500!important;
}

                  
button{
margin-bottom: 10px;
background-color: #f5bbcc!important;
border: 4px solid #0a0a0a!important;
color: #0a0a0a!important;
text-transform: uppercase!important;
    font-family: 'Montserrat', sans-serif!important;
    font-weight: 800!important;
    font-size: 18px!important;
    
-webkit-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
-moz-box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
box-shadow: 0px 0px 3px 0px rgba(66, 68, 90, 1)!important;
} 
</style>
<div class="container">
    <div class="h3">Add new employee</div>

    <EditForm Model="NewEmployeeModel" OnValidSubmit="HandleCreate">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="row">
            <!-- Personal data form -->
            <div class="col-6">
                <div class="mt-2">
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <InputText id="firstName" @bind-Value="NewEmployeeModel.FirstName" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="lastname">Last Name</label>
                        <InputText id="lastname" @bind-Value="NewEmployeeModel.LastName" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="phone">Phone number</label>
                        <InputText id="phone" @bind-Value="NewEmployeeModel.PhoneNumber" class="form-control"></InputText>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="mt-2">
                    <div class="form-group">
                        <label for="email">Email address</label>
                        <InputText id="email" @bind-Value="NewEmployeeModel.Email" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="dob">Date of birth</label>
                        <InputDate id="dob" @bind-Value="NewEmployeeModel.DateOfBirth" class="form-control"></InputDate>
                    </div>
                    <div class="form-group">
                        <label for="Gender">Gender</label>
                        <InputSelect id="Gender" @bind-Value="NewEmployeeModel.Gender" class="form-control">
                            @foreach (var gender in GenderOptions.Gender)
                            {
                                <option value="@gender">@gender</option>
                            }
                        </InputSelect>
                        @if (NewEmployeeModel.Gender != "Other")
                        {
                            NewEmployeeModel.GenderInput = NewEmployeeModel.Gender;
                        }
                        @if (NewEmployeeModel.Gender == "Other")
                        {
                            <label for="GenderText">Gender</label>
                            <InputText id="GenderText" @bind-Value="NewEmployeeModel.GenderInput" class="form-control"></InputText>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-5 mt-5">
            <div class="col-6">
                <div class="mt-2">
                    <div class="form-group">
                        <label for="position">Position at the office</label>
                        <InputText id="position" @bind-Value="NewEmployeeModel.Position" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="salary">Salary</label>
                        <InputNumber id="salary" @bind-Value="NewEmployeeModel.Salary" class="form-control"></InputNumber>
                    </div>
                </div>
            </div>

            <div class="col-6">
                <div class="mt-2">
                    <div class="form-group">
                        <label for="hire">Hiring data</label>
                        <InputDate id="hire" @bind-Value="NewEmployeeModel.DateOfHire" class="form-control"></InputDate>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="mt-2">
                    <button type="submit" class="btn btn-primary">Create new employee</button>
                </div>
            </div>
        </div>
    </EditForm>

</div>

@code {
    private NewEmployeeModel NewEmployeeModel { get; } = new();

    async void HandleCreate()
    {
        try
        {
            var response = await _employeeService.CreateNew(NewEmployeeModel);
            if (!response.IsSuccessStatusCode) return;
            var resp = await response.Content.ReadAsByteArrayAsync();
            var respBuffer = Encoding.UTF8.GetString(resp);
            var emp = JsonConvert.DeserializeObject<Employee>(respBuffer);
            if (emp != null)
            {
                _navigationManager.NavigateTo($"/details/{emp.Id}");
            }
        }
        catch (Exception exception)
        {
            if (exception is HttpRequestException or SocketException)
            {
                _navigationManager.NavigateTo("/no-connection-to-server");
            }
        }
    }

}